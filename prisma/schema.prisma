generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String    @unique
  full_name  String?
  avatar_url String?
  website    String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  posts      posts[]
}

model categories {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique
  slug        String    @unique
  description String?
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  posts       posts[]
}

model posts {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  content     String?
  published   Boolean     @default(false)
  author_id   String      @db.Uuid
  category_id String?     @db.Uuid
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  updated_at  DateTime    @default(now()) @db.Timestamptz(6)
  author      profiles    @relation(fields: [author_id], references: [id])
  category    categories? @relation(fields: [category_id], references: [id])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  bio       String?
  image     String?
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String   @unique
  image     String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
